// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String    @id
  username     String    @unique
  displayName  String
  email        String?   @unique
  passwordHash String?
  googleId     String?
  avatarUrl    String?
  bio          String?
  session      Session[]
  post         Post[]
  following    Follow[]  @relation("following")
  followers    Follow[]  @relation("followers")
  likes        Like[]
  Comment   Comment[]

  createdAt DateTime  @default(now())

  @@map("users")
}

model Session {
  id        String   @id
  userId    String
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Follow {
  followerId  String
  follower    User   @relation("following", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following   User   @relation("followers", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}

model Post {
  id      String @id @default(cuid())
  content String
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  likes     Like[]
  Comment   Comment[]
  createdAt DateTime  @default(now())

  @@map("posts")
}

model Like {
  id     String @id @default(cuid())
  userId String
  postId String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("likes")
}

model Comment {
  id     String @id @default(cuid())
  userId String
  postId String
  text   String
  post   Post   @relation(fields: [postId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())

  @@map("comments")
}
